üìú Deploying Kibana on Kubernetes for Log Visualization
In the vast sea of data that modern applications generate, logs hold a treasure trove of insights. Visualizing and analyzing these logs can be like navigating through a dense fog without a compass. This is where Kibana, a powerful open-source visualization tool, comes into play. When paired with Elasticsearch for storage and search, and Kubernetes for orchestration, it forms a robust setup for managing application logs. This guide will walk you through deploying Kibana on Kubernetes to tap into the insights your logs offer.

‚õ™ Understanding Kibana
Imagine Kibana as the lens that brings the details of your data into focus, allowing you to navigate through the complexities with ease. It connects to Elasticsearch, where your logs are stored, and lets you create visualizations such as charts and graphs. These visualizations are then organized into dashboards, providing you with insights at a glance.

‚úç Architecture Diagram
Diagram

üöÄ Deploying Kibana
Deploying Kibana involves creating a Deployment and a Service in Kubernetes. The Deployment ensures Kibana is running and manages replicas, while the Service makes Kibana accessible.

Creating the Kibana Deployment
Configuration File: Start by creating a configuration file for the Kibana Deployment. Let's name it kibana-deployment.yaml.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana:7.10.0
        env:
          - name: ELASTICSEARCH_HOSTS
            value: "http://elasticsearch:9200"
        ports:
        - containerPort: 5601
This YAML file defines a Deployment named kibana with a single replica. It uses the official Kibana image and connects to Elasticsearch via the ELASTICSEARCH_HOSTS environment variable.
Kibana uses port 5601 by default and communicates with ELasticsearch using an HTTP REST API. To secure Kibana, the security features of Elasticsearch should be enabled.

Deploying Kibana: With the configuration file ready, deploy Kibana using kubectl.
kubectl apply -f kibana-deployment.yaml
Exposing Kibana Through a Service
After deploying Kibana, you need to make it accessible. This is done by creating a Kubernetes Service.

Service Configuration File: Create a file named kibana-service.yaml.
apiVersion: v1
kind: Service
metadata:
  name: kibana
spec:
  type: NodePort
  ports:
  - port: 5601
    targetPort: 5601
    nodePort: 30001
  selector:
    app: kibana
This Service exposes Kibana on a NodePort, making it accessible from outside the cluster.

Creating the Service: Apply the Service configuration using kubectl.
kubectl apply -f kibana-service.yaml
‚ú® Accessing Kibana
With Kibana deployed and exposed, you can now access its interface using the IP address of any node in your cluster and the node port specified in the Service configuration (e.g., http://<node-ip>:30001).

To explore the raw logs shipped by Fluentd, you can access the Discover tab from the menu. You can use the Kibana Query Language (KQL) to search your data. However, you will first be required to specify an index pattern in order to select the data that has to be explored.

After having explored the logs, you can create dashboards to aggregate your data from various search operations. You can also import or export dashboards. Kibana dashboards are exported in the .ndjson format.

üéâ Conclusion
Congratulations! You've successfully deployed Kibana on Kubernetes and exposed it for access. This setup allows you to visualize and analyze your logs stored in Elasticsearch, turning raw data into actionable insights. As you explore Kibana's capabilities, consider diving deeper into creating custom visualizations and dashboards to tailor the insights to your specific needs.

Remember, this guide is just the beginning. The world of Kubernetes, Elasticsearch, and Kibana offers vast possibilities for managing and understanding your application logs. Keep experimenting and learning to make the most out of your data.

üéì What's Next?
In this lab, we will walk you through deploying Kibana on Kubernetes, a rich visualization tool, leveraging Kubernetes' features such as Deployments and Services for stability, data persistence, and network access.
Click on the Tasks tab to put your knowledge to the test and complete the hands-on exercises for this lab.
Happy learning! üöÄ
___________________________________________________________________________
tasks
Kibana serves as a powerful front-end to Elasticsearch, allowing users to visualize the stored logs through various types of charts and graphs, which can be organized into dashboards for easy access and analysis.

Which command will be used to deploy Kibana using the configuration file say 'kibana-deployment.yaml'?
==> kubectl apply -f kibana-deployment.yaml or kubectl create -f kibana-deployment.yaml

What is the primary purpose of deploying Kibana in a Kubernetes cluster?
==> Kibana is a data visualization tool that integrates with backends like Elasticsearch.

Which Kubernetes resource can be used to make Kibana accessible from outside the cluster?
==> To make Kibana accessible from outside the Kubernetes cluster, you can use a Kubernetes Service of type LoadBalancer or NodePort.

Services allow the exposure of a service running inside the cluster to external clients.

What is the default port number for Kibana?
==> 5601

What language is used by Kibana to search and filter data?
==> kibana query language (kql)

Which Kibana feature allows you to interactively explore your data by querying and filtering?
==> The Discover feature provides a user-friendly interface for searching, filtering, and viewing raw log data stored in Elasticsearch indices.

It is easily accessible from the Kibana menu.

Which file format is used for Kibana dashboard exports and imports?
==> uses a file format called NDJSON (Newline Delimited JSON) for exporting and importing dashboards.

NDJSON is a JSON format where each line represents a separate JSON object. This format is used to store multiple JSON objects in a single file, with each object separated by a newline character.

In Kibana, what is the role of the Index Pattern?
==> An Index Pattern defines which Elasticsearch data to explore and visualize in Kibana.

Creating an Index Pattern in Kibana means specifying a pattern that matches the names of the Elasticsearch indices.

Once an index is created, Kibana analyzes the logs within it and identifies fields and their types.


How does Kibana connect to Elasticsearch?
==> Kibana connects to Elasticsearch using the Elasticsearch REST API.

When you configure Kibana to connect to an Elasticsearch cluster, you provide the URL of the Elasticsearch cluster's REST API endpoint.

Kibana uses this endpoint to communicate with Elasticsearch for various operations.

How would you secure Kibana access in a production environment?
==> One of the ways to secure Kibana is to ensure that Elasticsearch is secured with authentication, authorization, and transport layer security (TLS/SSL) to protect the data accessed by Kibana.


Create a deployment for Kibana in the elastic-stack namespace.


Use the following specs:

name: kibana
label: kibana
replicas: 1
image: docker.elastic.co/kibana/kibana:7.1.0
containerPort: 5601
Deploy Kibana on Kubernetes by applying this configuration file.

Note: Be sure to use the 'kubectl' command to apply the file.
==> Create kibana-deployment.yaml file with the following contents:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: elastic-stack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana:7.1.0
        ports:
        - containerPort: 5601
Deploy Kibana using:

kubectl apply -f kibana-deployment.yaml

Verify that the Kibana pod is running successfully.


Pulling the image may take some time before the pod starts running.

Use the 'kubectl get pods' command and ensure the pod's status is Running.
==> List Kibana pods with: 'kubectl get pods -l app=kibana'.

Expose Kibana through a Kubernetes Service of type NodePort in the elastic-stack namespace.

Name the service as kibana.


Ensure the Service type is set to NodePort and the default kibana port 5601 is mapped to nodePort 30601.
==> Create a service file kibana-service.yaml with the following contents:

apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: elastic-stack
spec:
  type: NodePort
  selector:
    app: kibana
  ports:
  - protocol: TCP
    port: 5601
    nodePort: 30601
Create the Service:

kubectl apply -f kibana-service.yaml

Access Kibana's dashboard by clicking on the Kibana UI port link at the top right of the screen.

On the Kibana UI, select the Discover tab on the left.

As a first step, you will be asked to create an index pattern. Currently, only 1 index with the pattern fluentd-<date> will be visible to you. Enter this into the index bar and then click on Next step. You can use wildcards as well if you have multiple indices beginning with fluentd - fluentd-*.

Next, you need to specify whether you want to add a time filter field or not. For now, select @timestamp here and click on Create index pattern.

The Management menu is displayed and you can now see all the log fields identified in the index.

Now, click on Discover in the left sidebar and you can view all logs shipped by Fluentd to Elasticsearch.

Let's now try creating a simple query to display all logs for USER1. To start with, let's first select KQL present in the Search bar on the right.
By default, Lucene is selected.

Now, enter this query, click on Update, and analyze the results:
log : USER1

Experiment with the query syntax further. Use the following documentation for the same:
https://www.elastic.co/guide/en/kibana/current/kuery-query.html

To create visualizations and dashboards, refer to the following documentation:
https://www.elastic.co/guide/en/kibana/current/dashboard.html

A basic visualization idea might be - count of the occurence of each user in the logs.













































































