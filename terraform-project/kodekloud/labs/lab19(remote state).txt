In this lab, we will work with remote terraform state files.
We will first start with the local state and then migrate it to remote state with an S3 backend.

The configuration directory we will work with is /root/terraform-projects/RemoteState

First, create a simple configuration to create a local_file resource within the directory called RemoteState. The resource block should be created inside the main.tf file. Follow the below specifications for provisioning this resource:

Resource Name: state

filename: /root/<variable  local-state>

content: "This configuration uses <variable  local-state> state"


Use the variable called local-state in the variables.tf file which is already created for you and make use of variable interpolation syntax ${..}.

Once the configuration is ready, run a terraform init, plan and apply.
==> ## variables.tf
variable remote-state {
    type = string
    default = "remote"
}
variable local-state {
    type = string
    default = "local"
}

## main.tf
resource "local_file" "state" {
filename = "/root/${var.local-state}"
content = "This configuration uses ${var.local-state} state"
  
}

What is the name of the state file created for this configuration?

==> terraform.tfstate

Let's now move the state to a remote S3 backend. For this, we will make use of an S3 compatible storage called minio.


Minio provides an S3-compatible API and allows us to configure the s3 backend in the same way as the actual S3 service in AWS Cloud.

To explore minio and the S3 bucket that has been created, click on the Minio Browser tab on the top of the terminal window..

Use the following credentials to login:

Access Key: foofoo

Secret Key: barbarbar

We have already created an s3 bucket that we will use to store the remote state. From the Minio  Browser, identify the name of this bucket. (There is only one bucket created as of now)

==> remote-state

Before we add the configuration for the s3 backend, let's first change the local file resource. Change the variable used to remote-state instead of local-state.


Once done, run terraform plan and apply.
==> resource "local_file" "state" {
  filename = "/root/${var.remote-state}"
  content  = "This configuration uses ${var.remote-state} state"

}

Great! Now, let us configure the remote backend with s3. Add a terraform block in a new file called terraform.tf with the following arguments:


bucket: remote-state

key: terraform.tfstate

region: us-east-1


Do not run terraform init yet! Since we are making use of minio we also have to add a couple of additional arguments to get this to work!
We will do that in the next step. When using the regular s3 service from AWS the above arguments should be sufficient to configure remote state.

==> terraform.tf
terraform {
  backend "s3" {
    key = "terraform.tfstate"
    region = "us-east-1"
    bucket = "remote-state"

  }
}

To make the s3 backend with Minio to work, we have to add a few additional arguments. The terraform.tf file has been updated. Check it out.

Please note that these arguments are optional and not needed when working with the regular S3 service in AWS.

Try running terraform apply, are you able to do it? If not why?

terraform {
  backend "s3" {
    key = "terraform.tfstate"
    region = "us-east-1"
    bucket = "remote-state"
    endpoint = "http://172.16.238.105:9000"
    force_path_style = true


    skip_credentials_validation = true

    skip_metadata_api_check = true
    skip_region_validation = true
  }
}

==>backend reinisid required

Run terraform init in our configuration directory now.


Once done you can proceed to delete the terraform.tfstate file from the local directory.

From the Minio Browser, you should now be able to see the state file uploaded to the bucket called remote-state.
Login credentials -
Access Key: foofoo
Secret Key: barbarbar

==> terraform init



































