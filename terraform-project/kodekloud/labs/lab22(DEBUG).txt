Which environment variable should be used to export the logs to a specific path?

If unsure, refer to the documentation. Documentation tab is available at the top right.
=> TF_LOG_PATH

Can you export the debug logs from terraform just by setting TF_LOG_PATH environment variable and providing a path as the value to this variable?
=> no

We have a configuration directory called /root/terraform-projects/ProjectA. Enable logging with the log level set to ERROR and then export the logs the path /tmp/ProjectA.log.


Once the environment variables are set, run a terraform init and apply.

It's OK if this results in an error. Do not change any configuration files before you export the logs!


=> Run: export TF_LOG=ERROR and export TF_LOG_PATH=/tmp/ProjectA.log

Then run command such as terraform init; terraform apply inside the directory called /root/terraform-projects/ProjectA

Which Log Level provides the most details when you run terraform commands?
==> TRACE

Now navigate to /root/terraform-projects/ProjectB. We already have a main.tf file created for provisioning an AWS EC2 instance with the tag Name: projectb_webserver.


Run a terraform init and apply to provision this instance.

## main.tf
resource "aws_instance" "ProjectB" {
    ami = "ami-0c9bfc21ac5bf10eb"
    instance_type = "t2.large"
    tags = {
        Name = "projectb_webserver"
        Description = "Oversized Webserver"
    }
  
}
## provider.tf
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "4.15.0"
    }
  }
}

provider "aws" {
  region                      = "ca-central-1"
  skip_credentials_validation = true
  skip_requesting_account_id  = true

  endpoints {
    ec2                       = "http://aws:4566"
  }
}

Now, try running a terraform plan again. What is the effect?

=> resource will be recreated
Why is the resource called ProjectB being replaced?
==> ressouce is tained

Untaint the resource called ProjectB so that the resource is not replaced any more.


The resource is currently tainted.
==> Run: terraform untaint aws_instance.ProjectB






























