Navigate to the directory /root/terraform-projects/project-cerberus. We have an empty main.tf file in this directory.
Using this configuration file write a resource block to provision a simple EC2 instance with the following specifications:


Resource Name: cerberus

AMI: ami-06178cf087598769c, use variable named ami

region: eu-west-2, use variable named region

Instance Type: m5.large, use variable named instance_type


Once ready, run terraform init, plan and apply to provision this EC2 instance.

==> ## main.tf
variable "ami" {
  default = "ami-06178cf087598769c"
}

variable "instance_type" {
  default = "m5.large"
}

variable "region" {
  default = "eu-west-2"
}

resource "aws_instance" "cerberus" {
  ami           = var.ami
  instance_type = var.instance_type
}
## provider.tf
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "4.15.0"
    }
  }
}
provider "aws" {
  region                      = var.region
  skip_credentials_validation = true
  skip_requesting_account_id  = true

  endpoints {
    ec2 = "http://aws:4566"
  }
}
Perfect! The instance has been created by terraform. To inspect the details of this instance, you can run terraform show command from the configuration directory.

This will print the resource attributes from the state file in a human-readable format.

The AMI ID we have used is an RHEL 8 image in the London region that only accepts SSH-Key based authentication. However, when we created the instance, we did not make use of a key!

Let's create a new key-pair!

A new SSH key pair has been created in the directory /root/terraform-projects/project-cerberus/.ssh.

The private key is called cerberus and the public key is called cerberus.pub


Using the public key, create a new key-pair in AWS with the following specifications:

Resource Name: cerberus-key

key_name: cerberus

Use the file functions to read the public key cerberus.pub


When ready, run a terrafom plan and apply to create this key pair.


If unsure, refer to the documentation to create a key-pair. Documentation tab is available at the top right.
==>## main.tf
#You can also use variable for key_name
resource "aws_key_pair" "cerberus-key" {
    key_name = "cerberus"
    public_key = file(".ssh/cerberus.pub")
}

Let us now configure the cerberus resource to make use of this key. Update the resource block to make use of the key called cerberus.


Once the configuration is updated, run a terraform plan and terraform apply. This will trigger the replacement of the instance with the new one having the key-pair created in our previous step.

==> ## main.tf
resource "aws_instance" "cerberus" {
  ami           = var.ami
  instance_type = var.instance_type
  key_name = "cerberus"
}
#You can also use variable for key_name
resource "aws_key_pair" "cerberus-key" {
    key_name = "cerberus"
    public_key = file(".ssh/cerberus.pub")
}

Let us now install nginx with EC2 instance. To do this, let's make use of the user_data argument.

Using the file function again or by making use of the heredoc syntax, use the script called install-nginx.sh as the value for the user_data argument.


Do not run terraform apply yet!

## main.tf

resource "aws_instance" "cerberus" {
  ami           = var.ami
  instance_type = var.instance_type
  key_name = "cerberus"
  user_data = file("./install-nginx.sh")

}

What will happen if we run terraform apply now?
==> instance will be modified, but nginx will not be installed

In this case, an instance will be modified, but nginx will not be installed. It is due to the fact that User data scripts only run at first boot whereas the instance modification causes a reboot.

Let's apply the updated configuration in the next step!

Run terraform apply and let the EC2 instance be modified.

Where should you add a provisioner block?

==> nested block inside ressource block

Which of the following provisioners does not need a connection block defined?
==> local-exec

What is the public IPv4 address that has been allocated to this EC2 instance?
==> terraform show

We use the public IPv4 address to access this server. However, when this server is rebooted or recreated, this IP address would change.

To fix this, let's create an Elastic IP Address.

An Elastic IP address is a static IPv4 address which does not change over time.


Create an Elastic IP resource with the following specifications:

Resource Name: eip
vpc: true
instance: id of the EC2 instance created for resource cerberus (use a reference expression)
create a local-exec provisioner for the eip resource and use it to print the attribute called public_dns to a file /root/cerberus_public_dns.txt on the iac-server.

If unsure, refer to the documentation. Documentation tab is available at the top right.

==> ## main.tf
resource "aws_eip" "eip" {
  vpc      = true
  instance = aws_instance.cerberus.id
  provisioner "local-exec" {
    command = "echo ${aws_eip.eip.public_dns} >> /root/cerberus_public_dns.txt"
  }
}

In the current configuration, which dependency is NOT true?

==> 































