In this lab, we will work with DynamoDB tables using terraform.

The configuration directories have been created under /root/terraform-projects/DynamoDB.

We have already created a resource block for a DynamoDB table inside /root/terraform-projects/DynamoDB/project-sapphire-user-data/.

But something is wrong with this configuration. Try running a terraform plan or validate and identify the cause of the failure.

## main.tf
resource "aws_dynamodb_table" "project_sapphire_user_data" {
  name           = "userdata"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "UserId"

  attribute {
    name = "Name"
    type = "S"
  }
}

## provider.tf
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "4.15.0"
    }
  }
}

provider "aws" {
  region                      = var.region
  skip_credentials_validation = true
  skip_requesting_account_id  = true

  endpoints {
    dynamodb                       = "http://aws:4566"
  }
}
## variables.tf
variable "region" {
    default = "us-west-2"
  
}
Planning failed. Terraform encountered an error while generating this plan.

╷
│ Error: 2 errors occurred:
│       * all attributes must be indexed. Unused attributes: ["Name"]
│       * all indexes must match a defined attribute. Unmatched indexes: ["UserId"]
│ 
│ 
│ 
│   with aws_dynamodb_table.project_sapphire_user_data,
│   on main.tf line 1, in resource "aws_dynamodb_table" "project_sapphire_user_data":
│    1: resource "aws_dynamodb_table" "project_sapphire_user_data" {
│ 
╵
==> att for primary key is missed

That's right! At a minimum, the Primary Key should be defined as an attribute when creating a DynamoDB table.
In this configuration, we should add the attribute for UserId for it to work.

Let's fix that now! Update the main.tf file so that it uses an attribute for the Primary/Hash Key.
Note that the UserId should be a number.


Once ready, run a terraform init, plan and apply.

=>Update type as Number for the UserID in the main.tf.
==> resource "aws_dynamodb_table" "project_sapphire_user_data" {
  name           = "userdata"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "UserId"

  attribute {
    name = "UserId"
    type = "N"
  }
}

Another table has been created using the configuration in the directory /root/terraform-projects/DynamoDB/project-sapphire-inventory.

Navigate to this directory and inspect the configuration.

What is the name of the DynamoDB table resource that is created by this configuration?

## main.tf
resource "aws_dynamodb_table" "project_sapphire_inventory" {
  name           = "inventory"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "AssetID"

  attribute {
    name = "AssetID"
    type = "N"
  }
  attribute {
    name = "AssetName"
    type = "S"
  }
  attribute {
    name = "age"
    type = "N"
  }
  attribute {
    name = "Hardware"
    type = "B"
  }
  global_secondary_index {
    name             = "AssetName"
    hash_key         = "AssetName"
    projection_type    = "ALL"
    
  }
  global_secondary_index {
    name             = "age"
    hash_key         = "age"
    projection_type    = "ALL"
    
  }
  global_secondary_index {
    name             = "Hardware"
    hash_key         = "Hardware"
    projection_type    = "ALL"
    
  }
}
## provider.tf
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "4.15.0"
    }
  }
}

provider "aws" {
  region                      = var.region
  skip_credentials_validation = true
  skip_requesting_account_id  = true

  endpoints {
    dynamodb                       = "http://aws:4566"
  }
}
## variables.tf
variable "region" {
    default = "us-west-2"
  
}
==> project_sapphire_inventory

What is the name of the DynamoDB Table that is created this configuration?

.tfstate
            ],
            "hash_key": "AssetID",
            "id": "inventory",
            "local_secondary_index": [],
            "name": "inventory",
            "point_in_time_recovery": [
              {
                "enabled": false
              }
            ],
            "range_key": null,
            "read_capacity": 0,
            "replica": [],
            "restore_date_time": null,
            "restore_source_name": null,
            "restore_to_latest_time": null,
            "server_side_encryp
==> inventory
How many attributes are defined in this table currently?
==> 4
What is the name and type of the Primary Key used by this table?
==> AssertId-Number

Now, let's add an item to this table called inventory. Use the following specifications and update the main.tf file:


Resource Name: upload

Table = Use reference expression to the table called inventory

Hash Key = Use reference expression to use the primary key used by the table inventory


Use the below data for item:

{

"AssetID": {"N": "1"},

"AssetName": {"S": "printer"},

"age": {"N": "5"},

"Hardware": {"B": "true" }

}


when ready, run terraform init, plan and apply

==> resource "aws_dynamodb_table" "project_sapphire_inventory" {
  name           = "inventory"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "AssetID"

  attribute {
    name = "AssetID"
    type = "N"
  }
  attribute {
    name = "AssetName"
    type = "S"
  }
  attribute {
    name = "age"
    type = "N"
  }
  attribute {
    name = "Hardware"
    type = "B"
  }
  global_secondary_index {
    name             = "AssetName"
    hash_key         = "AssetName"
    projection_type    = "ALL"

  }
  global_secondary_index {
    name             = "age"
    hash_key         = "age"
    projection_type    = "ALL"

  }
  global_secondary_index {
    name             = "Hardware"
    hash_key         = "Hardware"
    projection_type    = "ALL"

  }
}
resource "aws_dynamodb_table_item" "upload" {
  table_name = aws_dynamodb_table.project_sapphire_inventory.name
  hash_key   = aws_dynamodb_table.project_sapphire_inventory.hash_key
  item = <<EOF
 {
  "AssetID": {"N": "1"},
  "AssetName": {"S": "printer"},
  "age": {"N": "5"},
  "Hardware": {"B": "true" }
}
EOF
}























