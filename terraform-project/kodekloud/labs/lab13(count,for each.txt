A new configuration directory has been created at /root/terraform-projects/project-shade. Inspect it. How many files will be created by this configuration?
resource "local_sensitive_file" "name" {
    filename = "/root/user-data"
    content = "password: S3cr3tP@ssw0rd"

}
==> 1

Now add a count argument to create 3 instances of this resource.


When ready, run terraform init, plan and apply

resource "local_sensitive_file" "name" {
  filename = "/root/user-data"
  content  = "password: S3cr3tP@ssw0rd"
  count    = 3
}

==> terraform fmt

created now ==> list 

What is the id for the resource element at index 1?

32...........

How many files were actually created when apply was run?

==> 1

We have now created a variables.tf file in the same configuration directory. Update the main.tf file to make use of the list type variable defined for the filename argument.


Use count to loop through all the elements of this list and do not use hard-coded values.


Use the variable called content for the argument called content.

variable.tf
variable "users" {
    type = list
}
variable "content" {
    default = "password: S3cr3tP@ssw0rd"
  
}

main.tf
resource "local_sensitive_file" "name" {
    filename = var.users[count.index]
    content = var.content
    count = length(var.users)

}

We have reverted back to the old configuration file and cleaned up the resources created so far.
A variable called users now has default values added to it.

What type of variable is it?

==> list(string)

Can the same elements in this list be used as it is for a set instead?

==> no-there are duplicate elements

Let's do the same exercise as before but this time we will make use of the for_each meta argument to create the files in this configuration.


Just like before don't use any hard-coded values.

Use for_each to loop through the list type variable called users.

Use the variable called content as the value of the argument content within main.tf.


When ready, run terraform init, plan and apply.

main.tf
resource "local_sensitive_file" "name" {
    filename = each.value
    for_each = toset(var.users)
    content = var.content

}

Let's do the same exercise as before but this time we will make use of the for_each meta argument to create the files in this configuration.


Just like before don't use any hard-coded values.

Use for_each to loop through the list type variable called users.

Use the variable called content as the value of the argument content within main.tf.


When ready, run terraform init, plan and apply.

resource "local_sensitive_file" "name" {
    filename = each.value
    for_each = toset(var.users)
    content = var.content

}

The resource called name is now created as:

==> map

The resource address with the filename - /root/user11 is now represented as:

==> local_sensitive_file.name["/root/user11"]


















































