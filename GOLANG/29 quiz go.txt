Select the correct declarations for an interface.


A.

type Student interface {
        id int
        grades  []int
        func calcGrades()
}



B.

type Student interface {
        calcGrades()
        getName()
}



C.

type Employee interface {
        calcSalary()
        getName()
}



D.

type Employee interface {
        func calcSalary()
        func getName()
}
==> B,C

What would be the output of the following program?


Note: add package and import statements as needed.

type Student interface {
        getPercentage() int
        getName()
}

type Undergrad struct {
        name   string
        grades []int
}

func (u Undergrad) getPercentage() int {
        sum := 0
        for _, v := range u.grades {
            sum += v
        }
        return sum / len(u.grades)
}

func printPercentage(s Student) {
        fmt.Println(s.getPercentage())
}

func main() {
        grades := []int{90, 75, 80}
        u := Undergrad{"Ross", grades}
        printPercentage(u)
}
==> Error

What would be the output of the following program?


Note: add package and import statements as needed.

type Student interface {
        getPercentage() int
        getName() string
}

type Undergrad struct {
        name   string
        grades []int
}

func (u Undergrad) getPercentage() int {
        sum := 0
        for _, v := range u.grades {
            sum += v
        }
        return sum / len(u.grades)
}
func (u Undergrad) getName() string {
        return u.name
}

func printData(s Student) {
        fmt.Println(s.getName())
        fmt.Println(s.getPercentage())
}

func main() {
        grades := []int{90, 75, 80}
        u := Undergrad{"Ross", grades}
        printData(u)
}
==> Ross
    81

What would be the output of the following program?


Note: add package and import statements as needed.

type Student interface {
        getPercentage() int
        getName() string
}

type Undergrad struct {
        name   string
        grades []int
}

type Postgrad struct {
        name   string
        grades []int
}

func (p Postgrad) getPercentage() int {
        sum := 0
        for _, v := range p.grades {
                sum += v
        }
        return ((sum * 100) / (len(p.grades) * 200))
}
func (p Postgrad) getName() string {
        return p.name
}

func (u Undergrad) getPercentage() int {
        sum := 0
        for _, v := range u.grades {
                sum += v
        }
        return sum / len(u.grades)
}
func (u Undergrad) getName() string {
        return u.name
}

func printData(s Student) {
        fmt.Println(s.getName())
        fmt.Println(s.getPercentage())
}

func main() {
        u := Undergrad{"Ross", []int{90, 75, 80}}
        p := Postgrad{"Joe", []int{150, 190, 185}}
        printData(u)
        printData(p)
}
==> Ross 
    81
    Joe 
    87

Which of the following keyword is used to implement an interface in Golang?
==> no keyword need to impliment interface




























