Select the correct statement(s) for high order functions


A. Function that receives a function as an argument.


B. Function that contains a function.


C. Function that returns another function.


D. Function that calls another function.
==> A,C

What would be the output of the following program?

package main

import "fmt"

func addHundred(x int) int {
        return x + 100
}
func partialSum(x ...int) func() {
        sum := 0
        for _, value := range x {
                sum += value
        }
        return func() {
                fmt.Println(addHundred(sum))
        }
}
func main() {
        partial := partialSum(1, 2, 3, 4, 5)
        partial()
}
==> 115

What would be the output of the following program?

package main

func addHundred(x int) int {
        return x + 100
}
func partialSum(x ...int) func() int {
        sum := 0
        for _, value := range x {
                sum += value
        }
        return func() int {
                return addHundred(sum)
        }
}
func main() {
        partial := partialSum(1, 2, 3)
        partial()
}
==> no output

What would be the output of the following program?

package main

import "fmt"

func addHundred(x int) int {
        return x + 100
}
func partialSum(add100 func(x int) int, x ...int) int {
        sum := 0
        for _, value := range x {
                sum += value
        }
        return add100(sum)

}
func main() {
        partial := partialSum(addHundred, 1, 2, 3)
        fmt.Println(partial)
}
==> 106

What would be the output of the following program?

package main

import "fmt"

func addHundred(x int) {
        fmt.Println(x + 100)
}
func partialSum(add100 func(x int), x ...int) int {
        sum := 0
        for _, value := range x {
                sum += value
        }
        add100(sum)
        return 0
}
func main() {
        partial := partialSum(addHundred, 1, 2, 3)
        fmt.Println(partial)
}
==> 106
0



















