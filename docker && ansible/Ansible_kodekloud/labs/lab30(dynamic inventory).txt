How many static inventory files do you see in the default ansible directory: /etc/ansible/ and ~/playbooks/ directory?
==> 0
We have 0 static inventories! That is because for this test, we will make use of dynamic inventory scripts
Explore the script dynamic_web.py. How many hosts do you see in group web?

The inventory script is located at ~/playbooks
[thor@ansible-controller playbooks]$ cat dynamic_web.py 
#!/usr/bin/env python

'''
Example custom dynamic inventory script for Ansible, in Python.
'''

import os
import sys
import argparse

try:
    import json
except ImportError:
    import simplejson as json

class ExampleInventory(object):

    def __init__(self):
        self.inventory = {}
        self.read_cli_args()

        # Called with `--list`.
        if self.args.list:
            self.inventory = self.example_inventory()
        # Called with `--host [hostname]`.
        elif self.args.host:
            # Not implemented, since we return _meta info `--list`.
            self.inventory = self.empty_inventory()
        # If no groups or vars are present, return an empty inventory.
        else:
            self.inventory = self.empty_inventory()

        print json.dumps(self.inventory);

    # Example inventory for testing.
    def example_inventory(self):
        return {
            'web': {
                'hosts': ['172.20.1.100', '172.20.1.101'],
                'vars': {
                    'ansible_ssh_user': 'root',
                    'ansible_ssh_pass': 'Passw0rd'
                         }
            },
            '_meta': {
                'hostvars': {
                    '172.20.1.100': {
                        'host_specific_var': 'foo'
                    },
                    '172.20.1.101': {
                        'host_specific_var': 'bar'
                    }
                }
            }
        }

    # Empty inventory for testing.
    def empty_inventory(self):
        return {'_meta': {'hostvars': {}}}

    # Read the command line args passed to the script.
    def read_cli_args(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('--list', action = 'store_true')
        parser.add_argument('--host', action = 'store')
        self.args = parser.parse_args()

# Get the inventory.
ExampleInventory()
==> 2
[thor@ansible-controller playbooks]$ cat dynamic_custom.py 
#!/usr/bin/env python

'''
Example custom dynamic inventory script for Ansible, in Python.
'''

import os
import sys
import argparse

try:
    import json
except ImportError:
    import simplejson as json

class ExampleInventory(object):

    def __init__(self):
        self.inventory = {}
        self.read_cli_args()

        # Called with `--list`.
        if self.args.list:
            self.inventory = self.example_inventory()
        # Called with `--host [hostname]`.
        elif self.args.host:
            # Not implemented, since we return _meta info `--list`.
            self.inventory = self.empty_inventory()
        # If no groups or vars are present, return an empty inventory.
        else:
            self.inventory = self.empty_inventory()

        print json.dumps(self.inventory);

    # Example inventory for testing.
    def example_inventory(self):
        return {
            'group': {
                'hosts': ['172.20.1.101', '172.20.1.102', '172.20.1.103'],
                'vars': {
                    'ansible_ssh_user': 'root',
                    'ansible_ssh_pass': 'Passw0rd'
                         }
            },
            '_meta': {
                'hostvars': {
                    '172.20.1.101': {
                        'host_specific_var': 'custom1'
                    },
                    '172.20.1.102': {
                        'host_specific_var': 'custom2'
                    },
                     },
                    '172.20.1.103': {
                        'host_specific_var': 'custom3'
                    }
                }
            }

    # Empty inventory for testing.
    def empty_inventory(self):
        return {'_meta': {'hostvars': {}}}

    # Read the command line args passed to the script.
    def read_cli_args(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('--list', action = 'store_true')
        parser.add_argument('--host', action = 'store')
        self.args = parser.parse_args()

# Get the inventory.
ExampleInventory()
==> 3
Run a simple ansible play using the ping module against the hosts using the inventory script dynamic_custom.py.


The playbook should be called ping.yml created under ~/playbooks
thor@ansible-controller playbooks]$ cat ping.yml 
---
- hosts: all
  tasks:
  - ping:
[thor@ansible-controller playbooks]$ cat dynamic_custom.py 
#!/usr/bin/env python

'''
Example custom dynamic inventory script for Ansible, in Python.
'''

import os
import sys
import argparse

try:
    import json
except ImportError:
    import simplejson as json

class ExampleInventory(object):

    def __init__(self):
        self.inventory = {}
        self.read_cli_args()

        # Called with `--list`.
        if self.args.list:
            self.inventory = self.example_inventory()
        # Called with `--host [hostname]`.
        elif self.args.host:
            # Not implemented, since we return _meta info `--list`.
            self.inventory = self.empty_inventory()
        # If no groups or vars are present, return an empty inventory.
        else:
            self.inventory = self.empty_inventory()

        print json.dumps(self.inventory);

    # Example inventory for testing.
    def example_inventory(self):
        return {
            'group': {
                'hosts': ['172.20.1.101', '172.20.1.102', '172.20.1.103'],
                'vars': {
                    'ansible_ssh_user': 'root',
                    'ansible_ssh_pass': 'Passw0rd'
                         }
            },
            '_meta': {
                'hostvars': {
                    '172.20.1.101': {
                        'host_specific_var': 'custom1'
                    },
                    '172.20.1.102': {
                        'host_specific_var': 'custom2'
                    },
                     },
                    '172.20.1.103': {
                        'host_specific_var': 'custom3'
                    }
                }
            }

    # Empty inventory for testing.
    def empty_inventory(self):
        return {'_meta': {'hostvars': {}}}

    # Read the command line args passed to the script.
    def read_cli_args(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('--list', action = 'store_true')
        parser.add_argument('--host', action = 'store')
        self.args = parser.parse_args()

# Get the inventory.
ExampleInventory()
We have created a dummy inventory script called ec2.py under ~/playbooks/. This script emulates the scenario of getting ec2 instance from an aws account.

Using ansible-inventory with the ec2.py script, what is the region for the host 172.20.1.109 ?
ansible-inventory -i ec2.py --host 172.20.1.109
{
    "ansible_ssh_pass": "Passw0rd", 
    "ansible_ssh_user": "root", 
    "ec2_region": "ca-central-1", 
    "ec2_state": "Running"
}












