Add an entry for node00 in ~/playbooks/inventory file. IP address of node00 host is 172.20.1.100 and SSH user and password is root and Passw0rd. We have a list of users in ~/playbooks/data/users.yml file. There are two groups in there admins and developers which have list of different users. Create a playbook ~/playbooks/add_users.yml to perform below given tasks on node00 node:


a. Add all users given in users.yml on node00.

b. Make sure home directory for all users under developers group is /var/www and for admins it should be default.

c. Set password d3v3l0p3r for all users under developers group and adm$n$ for users under admins group. Make sure to use Ansible vault to encrypt the passwords, use ~/playbooks/secrets/vault.txt file as vault secret file.

d. All users under admins group must be added as sudo user, for that simply make them member of wheel group on node00

[thor@ansible-controller playbooks]$ cat inventory 
node00 ansible_host=172.20.1.100 ansible_user=root ansible_ssh_pass=Passw0rd
node01 ansible_host=172.20.1.101 ansible_user=root ansible_ssh_pass=Passw0rd
node02 ansible_host=172.20.1.102 ansible_user=root ansible_ssh_pass=Passw0rd
[thor@ansible-controller playbooks]$ cat data/users.yml 
admins:
  - rob
  - david
  - joy

developers:
  - tim
  - ray
[thor@ansible-controller playbooks]$ cat secrets/vault.txt 
ansible-vault encrypt_string 'd3v3l0p3r'
ansible-vault encrypt_string 'adm$n$'
thor@ansible-controller playbooks]$ cat add_users.yml 
---
- hosts: node00
  gather_facts: no
  vars:
    admin_pass: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          64396331383031323064343432353935323334626437666531313633343232353936323738313337
          3436666266356534343934653132363866626231636663610a663731653135316132613831323463
          61663331626236303163306234353632643231353036323833373865346531306331613761356665
          3365653631656530310a626332643537333861653335643836646566323934653362333364386137
          3731
    developer_pass: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          63613761313339646563643435326633313066303030666266393232646137343065376530363933
          3034353231653239656332363661346337353836666130370a613366646565373431343932633337
          34666430376264386137326632626637383630383262333330376661656266393665386337326465
          3165366632623865660a363866653237386163653636373764626334303631333062623762396235
          6630
  tasks:
    - name: Include user.yml
      include_vars:
        file: data/users.yml
    - name: Creating admins
      user:
        name: "{{ item }}"
        password: "{{ admin_pass | string | password_hash('sha512') }}"
        groups: wheel
      with_items: "{{ admins | list }}"

    - name: creating developers
      user:
        name: "{{ item }}"
        password: "{{ developer_pass | string | password_hash('sha512') }}"
        home: /var/www
      with_items: "{{ developers | list 
==> ansible-playbook -i inventory add_users.yml --vault-password-file secrets/vault.txt
a. You can use include_vars to include data/users.yml variables.

b. List of users can be used like this "{{ developers | list }}"

c. The user module will only accept hashed passwords, see user module documentation for more details.

Using a playbook ~/playbooks/apache.yml (create new if doesn't exist) perform the below given tasks on node01:


a. Install httpd and php packages.

b. Change default document root of Apache to /var/www/html/myroot in default Apache config /etc/httpd/conf/httpd.conf. Make sure /var/www/html/myroot path exists.

c. There is a template ~/playbooks/templates/phpinfo.php.j2 on ansible controller node. Copy this template to Apache document root on node01 host as phpinfo.php file and make sure owner and group owner is apache user.

d. Start and enable httpd service.

e. Add rule in firewalld public zone to open http port 80 for public access so that phpinfo.php page is accessible in browser, also rule should be permanent.

---
- hosts: node01
  tasks:
    - name: remove httpd and php packages
      yum:
        name: httpd, php
        state: present

    - name: Create doc root
      file:
        path: /var/www/html/myroot
        state: directory
        owner: apache
        group: apache

    - name: change document root
      replace:
        path: /etc/httpd/conf/httpd.conf
        regexp: 'DocumentRoot "/var/www/html"'
        replace: 'DocumentRoot "/var/www/html/myroot"'

    - name: copy template
      template:
        src: phpinfo.php.j2
        dest: /var/www/html/myroot/phpinfo.php
        owner: apache
        group: apache

    - name: Start service httpd
      service:
        name: httpd
        state: started
        enabled: yes

    - name: open port httpd
      firewalld:
        port: 80/tcp
        state: enabled
        zone: public
        permanent: yes

[thor@ansible-controller playbooks]$ cat templates/phpinfo.php.j2 
<?php
phpinfo();
?>

We have php, nginx and mariadb installed on node02 and have a DB mydb created there. The user to connect to DB is myuser and password is mypassword. Create a playbook ~/playbooks/database.yml to perform below given tasks:


a. Start nginx and mariadb services.

b. Delete all default files/directories from nginx document root /usr/share/nginx/html/

c. Download a zip archive from https://github.com/indercodes/ansible-1100-mock-nginx/raw/master/index.php.zip and extract it in /usr/share/nginx/html/

d. The archive have an index.php file to check DB connectivity. Replace some required DB details in the file using replace or lineinfile module:

$database = "database"; to $database = "mydb";

$username = "user"; to $username = "myuser";

$password = "password"; to $password = "mypassword";

e. Restart nginx after making required changes.

###### Create database.yml playbook and add below given code

---
- hosts: node02
  tasks:
    - name: Start service nginx
      service:
        name: "{{ item }}"
        state: started
      with_items:
        - nginx
        - mariadb

    - name: clean nginx document root
      shell: rm -rf /usr/share/nginx/html/*

    - name: download zip
      unarchive: 
        src: https://github.com/indercodes/ansible-1100-mock-nginx/raw/master/index.php.zip
        dest: /usr/share/nginx/html/
        remote_src: yes

    - name: Update DB details
      replace:
        path: /usr/share/nginx/html/index.php
        regexp: '{{ item.1 }}'
        replace: '{{ item.2 }}'
      with_items:
        - { 1: '\$database.*', 2: '$database = "mydb";' }
        - { 1: '\$username.*', 2: '$username = "myuser";' }
        - { 1: '\$password.*', 2: '$password = "mypassword";' }

    - name: restart Nginx
      service:
        name: nginx
        state: restarted
Create a playbook facts.yml under ~/playbooks directory on Ansible controller. In this playbook using blockinfile module create a file facts.txt under /root on node02 host and add below given block in it. You will need to enable facts gathering for this task.

This is Ansible managed node `<hostname-of-host> `
IP address of host is `<ip-address-of-host>`
Its OS family is `<os-family>`

After that make a copy of this file as index.html under /usr/share/nginx/html/

###### Create facts.yml playbook and add below given code

---
- hosts: node02
  gather_facts: yes
  tasks:
    - name: Create facts.txt
      blockinfile:
        path: /root/facts.txt
        create: yes
        block: |
          This is Ansible managed node {{ ansible_nodename }}
          IP address of host is {{ ansible_default_ipv4.address }}
          Its OS family is {{ ansible_os_family }}

    - name: Make index.html
      copy:
        src: /root/facts.txt
        remote_src: yes
        dest: /usr/share/nginx/html/index.html
. ansible_nodename is the standard variable for fetching Ansible managed host's hostname.

b. ansible_default_ipv4.address is the standard variable for fetching Ansible managed host's default ipv4 IP address.

c. ansible_os_family is the standard variable for fetching Ansible managed host's OS family






